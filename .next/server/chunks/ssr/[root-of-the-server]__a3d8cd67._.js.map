{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/WizardLayout.tsx"],"sourcesContent":["import React from 'react';\nimport { Box, Stepper, Step, StepLabel } from '@mui/material';\n\nconst steps = [\n  'Upload Files',\n  'Review and Edit',\n  'Define Rules',\n  'Prioritize and Export',\n];\n\ninterface WizardLayoutProps {\n  activeStep: number;\n  children: React.ReactNode;\n}\n\nexport const WizardLayout: React.FC<WizardLayoutProps> = ({ activeStep, children }) => {\n  return (\n    <Box>\n      <Box sx={{ width: '100%', p: 2 }}>\n        <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 3 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n        <Box sx={{ mt: 4 }}>{children}</Box>\n      </Box>\n    </Box>\n  );\n};\n"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;;;AAEA,MAAM,QAAQ;IACZ;IACA;IACA;IACA;CACD;AAOM,MAAM,eAA4C,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE;IAChF,qBACE,8OAAC,wLAAA,CAAA,MAAG;kBACF,cAAA,8OAAC,wLAAA,CAAA,MAAG;YAAC,IAAI;gBAAE,OAAO;gBAAQ,GAAG;YAAE;;8BAC7B,8OAAC,oMAAA,CAAA,UAAO;oBAAC,YAAY;oBAAY,gBAAgB;oBAAC,IAAI;wBAAE,IAAI;oBAAE;8BAC3D,MAAM,GAAG,CAAC,CAAC,sBACV,8OAAC,2LAAA,CAAA,OAAI;sCACH,cAAA,8OAAC,0MAAA,CAAA,YAAS;0CAAE;;;;;;2BADH;;;;;;;;;;8BAKf,8OAAC,wLAAA,CAAA,MAAG;oBAAC,IAAI;wBAAE,IAAI;oBAAE;8BAAI;;;;;;;;;;;;;;;;;AAI7B","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/FileUploadStep.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\n\ninterface FileUploadStepProps {\n  onFilesLoaded: (files: FileList) => void;\n}\n\nexport const FileUploadStep: React.FC<FileUploadStepProps> = ({ onFilesLoaded }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" gap={2}>\n      <input\n        ref={inputRef}\n        type=\"file\"\n        accept=\".csv, .xlsx\"\n        multiple\n        style={{ display: 'none' }}\n        onChange={e => {\n          if (e.target.files) onFilesLoaded(e.target.files);\n        }}\n      />\n      <Button variant=\"contained\" onClick={() => inputRef.current?.click()}>\n        Upload CSV/XLSX Files\n      </Button>\n      <Box color=\"text.secondary\" fontSize={14}>\n        Accepts client, worker, and task files. Flexible headers.\n      </Box>\n    </Box>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAMO,MAAM,iBAAgD,CAAC,EAAE,aAAa,EAAE;IAC7E,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAoB;IAE1C,qBACE,8OAAC,sJAAA,CAAA,UAAG;QAAC,SAAQ;QAAO,eAAc;QAAS,YAAW;QAAS,KAAK;;0BAClE,8OAAC;gBACC,KAAK;gBACL,MAAK;gBACL,QAAO;gBACP,QAAQ;gBACR,OAAO;oBAAE,SAAS;gBAAO;gBACzB,UAAU,CAAA;oBACR,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,cAAc,EAAE,MAAM,CAAC,KAAK;gBAClD;;;;;;0BAEF,8OAAC,4JAAA,CAAA,UAAM;gBAAC,SAAQ;gBAAY,SAAS,IAAM,SAAS,OAAO,EAAE;0BAAS;;;;;;0BAGtE,8OAAC,sJAAA,CAAA,UAAG;gBAAC,OAAM;gBAAiB,UAAU;0BAAI;;;;;;;;;;;;AAKhD","debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/store/wizardStore.ts"],"sourcesContent":["import { create } from \"zustand\";\n\nexport type TableType = \"clients\" | \"workers\" | \"tasks\";\n\nexport type RowData = Record<\n  string,\n  string | number | boolean | null | undefined\n>;\n\nexport interface RawTableData {\n  type: TableType;\n  name: string;\n  data: RowData[];\n  columns: string[];\n}\n\ninterface WizardState {\n  step: number;\n  setStep: (step: number) => void;\n  tables: RawTableData[];\n  setTables: (tables: RawTableData[]) => void;\n  updateTableData: (tableIndex: number, newData: RowData[]) => void;\n  updateTableRow: (tableIndex: number, rowIndex: number, newRow: RowData) => void;\n  applyDataModification: (modificationFn: (data: RowData[]) => RowData[]) => void;\n}\n\nexport const useWizardStore = create<WizardState>((set, get) => ({\n  step: 0,\n  setStep: (step) => set({ step }),\n  tables: [],\n  setTables: (tables) => set({ tables }),\n  \n  updateTableData: (tableIndex: number, newData: RowData[]) => {\n    const { tables } = get();\n    if (tableIndex >= 0 && tableIndex < tables.length) {\n      const updatedTables = [...tables];\n      updatedTables[tableIndex] = {\n        ...updatedTables[tableIndex],\n        data: newData\n      };\n      set({ tables: updatedTables });\n    }\n  },\n  \n  updateTableRow: (tableIndex: number, rowIndex: number, newRow: RowData) => {\n    const { tables } = get();\n    if (tableIndex >= 0 && tableIndex < tables.length) {\n      const updatedTables = [...tables];\n      const table = updatedTables[tableIndex];\n      if (rowIndex >= 0 && rowIndex < table.data.length) {\n        table.data[rowIndex] = newRow;\n        set({ tables: updatedTables });\n      }\n    }\n  },\n  \n  applyDataModification: (modificationFn: (data: RowData[]) => RowData[]) => {\n    const { tables } = get();\n    if (tables.length > 0) {\n      const updatedTables = [...tables];\n      // Apply modification to the first table (you can modify this logic as needed)\n      updatedTables[0] = {\n        ...updatedTables[0],\n        data: modificationFn([...updatedTables[0].data])\n      };\n      set({ tables: updatedTables });\n    }\n  }\n}));\n"],"names":[],"mappings":";;;AAAA;;AA0BO,MAAM,iBAAiB,CAAA,GAAA,wIAAA,CAAA,SAAM,AAAD,EAAe,CAAC,KAAK,MAAQ,CAAC;QAC/D,MAAM;QACN,SAAS,CAAC,OAAS,IAAI;gBAAE;YAAK;QAC9B,QAAQ,EAAE;QACV,WAAW,CAAC,SAAW,IAAI;gBAAE;YAAO;QAEpC,iBAAiB,CAAC,YAAoB;YACpC,MAAM,EAAE,MAAM,EAAE,GAAG;YACnB,IAAI,cAAc,KAAK,aAAa,OAAO,MAAM,EAAE;gBACjD,MAAM,gBAAgB;uBAAI;iBAAO;gBACjC,aAAa,CAAC,WAAW,GAAG;oBAC1B,GAAG,aAAa,CAAC,WAAW;oBAC5B,MAAM;gBACR;gBACA,IAAI;oBAAE,QAAQ;gBAAc;YAC9B;QACF;QAEA,gBAAgB,CAAC,YAAoB,UAAkB;YACrD,MAAM,EAAE,MAAM,EAAE,GAAG;YACnB,IAAI,cAAc,KAAK,aAAa,OAAO,MAAM,EAAE;gBACjD,MAAM,gBAAgB;uBAAI;iBAAO;gBACjC,MAAM,QAAQ,aAAa,CAAC,WAAW;gBACvC,IAAI,YAAY,KAAK,WAAW,MAAM,IAAI,CAAC,MAAM,EAAE;oBACjD,MAAM,IAAI,CAAC,SAAS,GAAG;oBACvB,IAAI;wBAAE,QAAQ;oBAAc;gBAC9B;YACF;QACF;QAEA,uBAAuB,CAAC;YACtB,MAAM,EAAE,MAAM,EAAE,GAAG;YACnB,IAAI,OAAO,MAAM,GAAG,GAAG;gBACrB,MAAM,gBAAgB;uBAAI;iBAAO;gBACjC,8EAA8E;gBAC9E,aAAa,CAAC,EAAE,GAAG;oBACjB,GAAG,aAAa,CAAC,EAAE;oBACnB,MAAM,eAAe;2BAAI,aAAa,CAAC,EAAE,CAAC,IAAI;qBAAC;gBACjD;gBACA,IAAI;oBAAE,QAAQ;gBAAc;YAC9B;QACF;IACF,CAAC","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/utils/parseFiles.ts"],"sourcesContent":["import Papa from \"papaparse\";\nimport * as XLSX from \"xlsx\";\nimport { RawTableData, TableType, RowData } from \"../store/wizardStore\";\n\nconst TABLE_KEYWORDS: Record<TableType, string[]> = {\n  clients: [\"client\", \"cliente\", \"clientes\"],\n  workers: [\"worker\", \"trabajador\", \"empleado\", \"workers\"],\n  tasks: [\"task\", \"tarea\", \"tasks\", \"tareas\"],\n};\n\nfunction guessTableType(filename: string): TableType | null {\n  const lower = filename.toLowerCase();\n  for (const [type, keywords] of Object.entries(TABLE_KEYWORDS)) {\n    if (keywords.some((kw) => lower.includes(kw))) return type as TableType;\n  }\n  return null;\n}\n\nexport async function parseFiles(files: FileList): Promise<RawTableData[]> {\n  const results: RawTableData[] = [];\n  for (const file of Array.from(files)) {\n    const ext = file.name.split(\".\").pop()?.toLowerCase();\n    let rows: RowData[] = [];\n    let columns: string[] = [];\n    if (ext === \"csv\") {\n      const text = await file.text();\n      const parsed = Papa.parse<RowData>(text, {\n        header: true,\n        skipEmptyLines: true,\n      });\n      rows = parsed.data as RowData[];\n      columns = parsed.meta.fields || [];\n    } else if (ext === \"xlsx\") {\n      const data = await file.arrayBuffer();\n      const workbook = XLSX.read(data);\n      const sheet = workbook.Sheets[workbook.SheetNames[0]];\n      rows = XLSX.utils.sheet_to_json<RowData>(sheet, { defval: \"\" });\n      columns = Object.keys(rows[0] || {});\n    }\n    const type = guessTableType(file.name) || \"tasks\";\n    results.push({ type, name: file.name, data: rows, columns });\n  }\n  return results;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGA,MAAM,iBAA8C;IAClD,SAAS;QAAC;QAAU;QAAW;KAAW;IAC1C,SAAS;QAAC;QAAU;QAAc;QAAY;KAAU;IACxD,OAAO;QAAC;QAAQ;QAAS;QAAS;KAAS;AAC7C;AAEA,SAAS,eAAe,QAAgB;IACtC,MAAM,QAAQ,SAAS,WAAW;IAClC,KAAK,MAAM,CAAC,MAAM,SAAS,IAAI,OAAO,OAAO,CAAC,gBAAiB;QAC7D,IAAI,SAAS,IAAI,CAAC,CAAC,KAAO,MAAM,QAAQ,CAAC,MAAM,OAAO;IACxD;IACA,OAAO;AACT;AAEO,eAAe,WAAW,KAAe;IAC9C,MAAM,UAA0B,EAAE;IAClC,KAAK,MAAM,QAAQ,MAAM,IAAI,CAAC,OAAQ;QACpC,MAAM,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI;QACxC,IAAI,OAAkB,EAAE;QACxB,IAAI,UAAoB,EAAE;QAC1B,IAAI,QAAQ,OAAO;YACjB,MAAM,OAAO,MAAM,KAAK,IAAI;YAC5B,MAAM,SAAS,sIAAA,CAAA,UAAI,CAAC,KAAK,CAAU,MAAM;gBACvC,QAAQ;gBACR,gBAAgB;YAClB;YACA,OAAO,OAAO,IAAI;YAClB,UAAU,OAAO,IAAI,CAAC,MAAM,IAAI,EAAE;QACpC,OAAO,IAAI,QAAQ,QAAQ;YACzB,MAAM,OAAO,MAAM,KAAK,WAAW;YACnC,MAAM,WAAW,CAAA,GAAA,6HAAA,CAAA,OAAS,AAAD,EAAE;YAC3B,MAAM,QAAQ,SAAS,MAAM,CAAC,SAAS,UAAU,CAAC,EAAE,CAAC;YACrD,OAAO,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAU,OAAO;gBAAE,QAAQ;YAAG;YAC7D,UAAU,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;QACpC;QACA,MAAM,OAAO,eAAe,KAAK,IAAI,KAAK;QAC1C,QAAQ,IAAI,CAAC;YAAE;YAAM,MAAM,KAAK,IAAI;YAAE,MAAM;YAAM;QAAQ;IAC5D;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/ValidatorPanel.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\n\nexport interface ValidationError {\n  table: string;\n  row: number;\n  column: string;\n  message: string;\n  severity?: 'error' | 'warning';\n}\n\ninterface ValidatorPanelProps {\n  errors: ValidationError[];\n  onSelectError?: (error: ValidationError) => void;\n}\n\nexport const ValidatorPanel: React.FC<ValidatorPanelProps> = ({ errors, onSelectError }) => {\n  const [showInfo, setShowInfo] = useState(true);\n  if (!errors.length) return null;\n  return (\n    <Box sx={{ minWidth: 260, maxWidth: 340, bgcolor: 'background.paper', border: '1px solid #eee', borderRadius: 2, p: 2 }}>\n      {showInfo && (\n        <Alert\n          severity=\"info\"\n          sx={{ mb: 2 }}\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => setShowInfo(false)}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n          <strong>Note:</strong> Warnings do not block progress. You can proceed to the next step even if warnings are present.\n        </Alert>\n      )}\n      <Typography variant=\"h6\" gutterBottom color=\"text.primary\" fontWeight={600}>\n        Validation Errors ({errors.length})\n      </Typography>\n      <List dense>\n        {errors.map((err, idx) => (\n          <ListItem key={idx} onClick={() => onSelectError?.(err)} style={onSelectError ? { cursor: 'pointer' } : {}}>\n            <ListItemText\n              primary={\n                <span style={{ color: err.severity === 'error' ? '#d32f2f' : '#ed6c02', fontWeight: 500 }}>\n                  [{err.table}] Row {err.row + 1}, Column &quot;{err.column}&quot;\n                </span>\n              }\n              secondary={\n                <span style={{ color: '#333', fontWeight: 500 }}>\n                  {err.message}\n                </span>\n              }\n            />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAeO,MAAM,iBAAgD,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE;IACrF,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,IAAI,CAAC,OAAO,MAAM,EAAE,OAAO;IAC3B,qBACE,8OAAC,sJAAA,CAAA,UAAG;QAAC,IAAI;YAAE,UAAU;YAAK,UAAU;YAAK,SAAS;YAAoB,QAAQ;YAAkB,cAAc;YAAG,GAAG;QAAE;;YACnH,0BACC,8OAAC,0JAAA,CAAA,UAAK;gBACJ,UAAS;gBACT,IAAI;oBAAE,IAAI;gBAAE;gBACZ,sBACE,8OAAC,oKAAA,CAAA,UAAU;oBACT,cAAW;oBACX,OAAM;oBACN,MAAK;oBACL,SAAS,IAAM,YAAY;8BAE3B,cAAA,8OAAC,0JAAA,CAAA,UAAS;wBAAC,UAAS;;;;;;;;;;;;kCAIxB,8OAAC;kCAAO;;;;;;oBAAc;;;;;;;0BAG1B,8OAAC,oKAAA,CAAA,UAAU;gBAAC,SAAQ;gBAAK,YAAY;gBAAC,OAAM;gBAAe,YAAY;;oBAAK;oBACtD,OAAO,MAAM;oBAAC;;;;;;;0BAEpC,8OAAC,wJAAA,CAAA,UAAI;gBAAC,KAAK;0BACR,OAAO,GAAG,CAAC,CAAC,KAAK,oBAChB,8OAAC,gKAAA,CAAA,UAAQ;wBAAW,SAAS,IAAM,gBAAgB;wBAAM,OAAO,gBAAgB;4BAAE,QAAQ;wBAAU,IAAI,CAAC;kCACvG,cAAA,8OAAC,wKAAA,CAAA,UAAY;4BACX,uBACE,8OAAC;gCAAK,OAAO;oCAAE,OAAO,IAAI,QAAQ,KAAK,UAAU,YAAY;oCAAW,YAAY;gCAAI;;oCAAG;oCACvF,IAAI,KAAK;oCAAC;oCAAO,IAAI,GAAG,GAAG;oCAAE;oCAAgB,IAAI,MAAM;oCAAC;;;;;;;4BAG9D,yBACE,8OAAC;gCAAK,OAAO;oCAAE,OAAO;oCAAQ,YAAY;gCAAI;0CAC3C,IAAI,OAAO;;;;;;;;;;;uBATL;;;;;;;;;;;;;;;;AAkBzB","debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/utils/validateTables.ts"],"sourcesContent":["import { RawTableData } from '../store/wizardStore';\nimport { ValidationError } from '../components/wizard/ValidatorPanel';\n\n// Minimum rules: missing column, duplicate ID, out-of-range values, empty fields, incorrect type, etc.\n\nconst idColumns: Record<string, string> = {\n  clients: 'ClientID',\n  workers: 'WorkerID',\n  tasks: 'TaskID',\n};\n\nconst requiredFields: Record<string, string[]> = {\n  clients: ['ClientID', 'ClientName'],\n  workers: ['WorkerID', 'WorkerName'],\n  tasks: ['TaskID', 'TaskName'],\n};\n\nexport function validateTables(tables: RawTableData[]): ValidationError[] {\n  const errors: ValidationError[] = [];\n\n  // Build lookup sets for cross-entity validation\n  const workerSkills = new Set(\n    (tables.find(t => t.type === 'workers')?.data || [])\n      .flatMap(row => (typeof row['Skills'] === 'string' ? row['Skills'].split(',').map((s: string) => s.trim()) : []))\n  );\n\n  tables.forEach((table) => {\n    const idCol = idColumns[table.type] || 'id';\n    if (!table.data || table.data.length === 0) return;\n\n    // 1. Check for required ID column\n    const firstRow = table.data[0];\n    if (!firstRow || !(idCol in firstRow)) {\n      errors.push({\n        table: table.type,\n        row: 0,\n        column: idCol,\n        message: `Missing required column: ${idCol}. Please add this column to your data file.`,\n        severity: 'error'\n      });\n      return;\n    }\n    // 2. Duplicate IDs\n    const ids = new Set<string>();\n    table.data.forEach((row: Record<string, unknown>, i: number) => {\n      const id = row[idCol];\n      if (typeof id === 'string' || typeof id === 'number') {\n        const idStr = String(id);\n        if (ids.has(idStr)) {\n          errors.push({\n            table: table.type,\n            row: i,\n            column: idCol,\n            message: `Duplicate ${idCol}: ${idStr}. Each row must have a unique ID.`,\n            severity: 'error'\n          });\n        } else {\n          ids.add(idStr);\n        }\n      }\n    });\n    // 3. Check for empty required fields\n    const reqFields = requiredFields[table.type] || [];\n    reqFields.forEach(field => {\n      table.data.forEach((row: Record<string, unknown>, i: number) => {\n        const value = row[field];\n        if (value === null || value === undefined || value === '') {\n          errors.push({\n            table: table.type,\n            row: i,\n            column: field,\n            message: `Missing value for required field: ${field}. Please fill in this field.`,\n            severity: 'warning'\n          });\n        }\n      });\n    });\n    // 4. Advanced: Cross-entity and JSON validation\n    if (table.type === 'clients') {\n      // No per-row checks needed for clients at this stage\n    }\n    if (table.type === 'tasks') {\n      table.data.forEach((row: Record<string, unknown>, i: number) => {\n        // RequiredSkills must exist in workers' skills\n        if (row['RequiredSkills']) {\n          const skills = String(row['RequiredSkills']).split(',').map(s => s.trim());\n          skills.forEach(skill => {\n            if (skill && !workerSkills.has(skill)) {\n              errors.push({\n                table: table.type,\n                row: i,\n                column: 'RequiredSkills',\n                message: `Required skill '${skill}' is not covered by any worker. Please check your workers' skills.`,\n                severity: 'error'\n              });\n            }\n          });\n        }\n      });\n    }\n    // 5. Validate numeric fields\n    const numericFields = ['priority', 'duration', 'cost'];\n    numericFields.forEach(field => {\n      table.data.forEach((row: Record<string, unknown>, i: number) => {\n        const value = row[field];\n        if (value !== null && value !== undefined && value !== '') {\n          const numValue = Number(value);\n          if (isNaN(numValue) || numValue < 0) {\n            errors.push({\n              table: table.type,\n              row: i,\n              column: field,\n              message: `Invalid numeric value for ${field}: ${value}`,\n              severity: 'error'\n            });\n          }\n        }\n      });\n    });\n\n    // 6. Validate date fields\n    const dateFields = ['start_date', 'end_date', 'deadline'];\n    dateFields.forEach(field => {\n      table.data.forEach((row: Record<string, unknown>, i: number) => {\n        const value = row[field];\n        if (value !== null && value !== undefined && value !== '') {\n          const dateValue = new Date(String(value));\n          if (isNaN(dateValue.getTime())) {\n            errors.push({\n              table: table.type,\n              row: i,\n              column: field,\n              message: `Invalid date format for ${field}: ${value}`,\n              severity: 'error'\n            });\n          }\n        }\n      });\n    });\n\n    // 7. Check for reasonable string lengths\n    const stringFields = ['name', 'description', 'notes'];\n    stringFields.forEach(field => {\n      table.data.forEach((row: Record<string, unknown>, i: number) => {\n        const value = row[field];\n        if (typeof value === 'string' && value.length > 500) {\n          errors.push({\n            table: table.type,\n            row: i,\n            column: field,\n            message: `Text too long for ${field}: ${value.length} characters`,\n            severity: 'warning'\n          });\n        }\n      });\n    });\n  });\n\n  return errors;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/DataReviewStep.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { DataGrid, GridColDef, GridCellParams } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport { useWizardStore } from '../../store/wizardStore';\nimport { ValidatorPanel, ValidationError } from './ValidatorPanel';\nimport { validateTables } from '../../utils/validateTables';\n\ninterface DataReviewStepProps {\n  onNext: () => void;\n}\n\nexport const DataReviewStep: React.FC<DataReviewStepProps> = ({ onNext }) => {\n  const tables = useWizardStore((s) => s.tables);\n  // The error panel allows selection, but it's not used yet\n  const [, setSelectedError] = useState<ValidationError | null>(null);\n\n  const errors = useMemo(() => validateTables(tables), [tables]);\n\n  if (!tables || tables.length === 0) {\n    return <Typography color=\"error\">No data loaded.</Typography>;\n  }\n\n  // Highlight cells with errors\n  const getCellClassName = (tableName: string, rowIdx: number, col: string) => {\n    return errors.some(e => e.table === tableName && e.row === rowIdx && e.column === col)\n      ? 'cell-error' : '';\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection={{ xs: 'column', md: 'row' }} gap={4}>\n      <Box flex={1} display=\"flex\" flexDirection=\"column\" gap={4}>\n        {tables.map((table) => {\n          const columns: GridColDef[] = table.columns.map((col) => ({\n            field: col,\n            headerName: col,\n            width: 150,\n            editable: true,\n            cellClassName: (params: GridCellParams) =>\n              getCellClassName(table.name, params.id as number, col),\n          }));\n          return (\n            <Box key={table.name}>\n              <Typography variant=\"h6\" gutterBottom>\n                {table.type.toUpperCase()} ({table.name})\n              </Typography>\n              <DataGrid\n                rows={table.data.map((row, i) => ({ id: i, ...row }))}\n                columns={columns}\n                autoHeight\n                initialState={{ pagination: { paginationModel: { pageSize: 5 } } }}\n                pageSizeOptions={[5, 10, 20]}\n                disableRowSelectionOnClick\n              />\n            </Box>\n          );\n        })}\n        <Button variant=\"contained\" color=\"primary\" onClick={onNext} sx={{ alignSelf: 'flex-end' }} disabled={errors.length > 0}>\n          Next: Define Rules\n        </Button>\n      </Box>\n      <ValidatorPanel errors={errors} onSelectError={setSelectedError} />\n      <style jsx global>{`\n        .cell-error {\n          background: #ffeaea !important;\n          color: #b71c1c !important;\n        }\n      `}</style>\n    </Box>\n  );\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAMO,MAAM,iBAAgD,CAAC,EAAE,MAAM,EAAE;IACtE,MAAM,SAAS,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD,EAAE,CAAC,IAAM,EAAE,MAAM;IAC7C,0DAA0D;IAC1D,MAAM,GAAG,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA0B;IAE9D,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,CAAA,GAAA,8HAAA,CAAA,iBAAc,AAAD,EAAE,SAAS;QAAC;KAAO;IAE7D,IAAI,CAAC,UAAU,OAAO,MAAM,KAAK,GAAG;QAClC,qBAAO,8OAAC,oKAAA,CAAA,UAAU;YAAC,OAAM;sBAAQ;;;;;;IACnC;IAEA,8BAA8B;IAC9B,MAAM,mBAAmB,CAAC,WAAmB,QAAgB;QAC3D,OAAO,OAAO,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,aAAa,EAAE,GAAG,KAAK,UAAU,EAAE,MAAM,KAAK,OAC9E,eAAe;IACrB;IAEA,qBACE,8OAAC,sJAAA,CAAA,UAAG;QAAC,SAAQ;QAAO,eAAe;YAAE,IAAI;YAAU,IAAI;QAAM;QAAG,KAAK;;0BACnE,8OAAC,sJAAA,CAAA,UAAG;gBAAC,MAAM;gBAAG,SAAQ;gBAAO,eAAc;gBAAS,KAAK;;oBACtD,OAAO,GAAG,CAAC,CAAC;wBACX,MAAM,UAAwB,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,MAAQ,CAAC;gCACxD,OAAO;gCACP,YAAY;gCACZ,OAAO;gCACP,UAAU;gCACV,eAAe,CAAC,SACd,iBAAiB,MAAM,IAAI,EAAE,OAAO,EAAE,EAAY;4BACtD,CAAC;wBACD,qBACE,8OAAC,sJAAA,CAAA,UAAG;;8CACF,8OAAC,oKAAA,CAAA,UAAU;oCAAC,SAAQ;oCAAK,YAAY;;wCAClC,MAAM,IAAI,CAAC,WAAW;wCAAG;wCAAG,MAAM,IAAI;wCAAC;;;;;;;8CAE1C,8OAAC,yKAAA,CAAA,WAAQ;oCACP,MAAM,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,IAAM,CAAC;4CAAE,IAAI;4CAAG,GAAG,GAAG;wCAAC,CAAC;oCACnD,SAAS;oCACT,UAAU;oCACV,cAAc;wCAAE,YAAY;4CAAE,iBAAiB;gDAAE,UAAU;4CAAE;wCAAE;oCAAE;oCACjE,iBAAiB;wCAAC;wCAAG;wCAAI;qCAAG;oCAC5B,0BAA0B;;;;;;;2BAVpB,MAAM,IAAI;;;;;oBAcxB;kCACA,8OAAC,4JAAA,CAAA,UAAM;wBAAC,SAAQ;wBAAY,OAAM;wBAAU,SAAS;wBAAQ,IAAI;4BAAE,WAAW;wBAAW;wBAAG,UAAU,OAAO,MAAM,GAAG;kCAAG;;;;;;;;;;;;0BAI3H,8OAAC,8IAAA,CAAA,iBAAc;gBAAC,QAAQ;gBAAQ,eAAe;;;;;;;;;;;;;;;;AASrD","debugId":null}},
    {"offset": {"line": 786, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/AIRuleRecommendations.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Chip,\r\n  CircularProgress,\r\n  Alert,\r\n  Box,\r\n  Typography,\r\n  Divider\r\n} from '@mui/material';\r\nimport { Lightbulb, AutoAwesome, CheckCircle } from '@mui/icons-material';\r\nimport { RuleRecommendation } from '@/utils/aiServices';\r\n\r\ninterface AIRuleRecommendationsProps {\r\n  data: Record<string, unknown>[];\r\n  onApplyRule: (rule: RuleRecommendation) => void;\r\n  onApplyAllRules: (rules: RuleRecommendation[]) => void;\r\n}\r\n\r\nexport default function AIRuleRecommendations({\r\n  data,\r\n  onApplyRule,\r\n  onApplyAllRules\r\n}: AIRuleRecommendationsProps) {\r\n  const [recommendations, setRecommendations] = useState<RuleRecommendation[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const generateRecommendations = async () => {\r\n    if (data.length === 0) {\r\n      setError('No data available for analysis');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Mock AI recommendations for now - replace with actual AI service call\r\n      const mockRecommendations: RuleRecommendation[] = [\r\n        {\r\n          ruleType: 'validation',\r\n          field: 'email',\r\n          condition: 'email format',\r\n          description: 'Validate email addresses are in correct format',\r\n          confidence: 0.95,\r\n          suggestedAction: 'Add email validation rule'\r\n        },\r\n        {\r\n          ruleType: 'transformation',\r\n          field: 'phone',\r\n          condition: 'standardize format',\r\n          description: 'Standardize phone numbers to consistent format',\r\n          confidence: 0.88,\r\n          suggestedAction: 'Add phone number formatting rule'\r\n        },\r\n        {\r\n          ruleType: 'validation',\r\n          field: 'age',\r\n          condition: 'range 0-120',\r\n          description: 'Validate age is within reasonable range',\r\n          confidence: 0.92,\r\n          suggestedAction: 'Add age range validation'\r\n        }\r\n      ];\r\n\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      setRecommendations(mockRecommendations);\r\n    } catch (err) {\r\n      setError('Failed to generate AI recommendations');\r\n      console.error('AI recommendation error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getConfidenceColor = (confidence: number) => {\r\n    if (confidence >= 0.9) return 'success';\r\n    if (confidence >= 0.7) return 'warning';\r\n    return 'error';\r\n  };\r\n\r\n  const getRuleTypeIcon = (ruleType: string) => {\r\n    switch (ruleType) {\r\n      case 'validation':\r\n        return <CheckCircle fontSize=\"small\" />;\r\n      case 'transformation':\r\n        return <AutoAwesome fontSize=\"small\" />;\r\n      case 'formatting':\r\n        return <Lightbulb fontSize=\"small\" />;\r\n      default:\r\n        return <Lightbulb fontSize=\"small\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ width: '100%', mb: 2 }}>\r\n      <CardHeader\r\n        title={\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            <AutoAwesome color=\"primary\" />\r\n            <Typography variant=\"h6\">AI Rule Recommendations</Typography>\r\n          </Box>\r\n        }\r\n        subheader=\"Let AI analyze your data and suggest validation rules\"\r\n        action={\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={generateRecommendations}\r\n            disabled={loading || data.length === 0}\r\n            startIcon={loading ? <CircularProgress size={20} /> : <Lightbulb />}\r\n          >\r\n            {loading ? 'Analyzing...' : 'Generate Recommendations'}\r\n          </Button>\r\n        }\r\n      />\r\n      \r\n      <CardContent>\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {recommendations.length > 0 && (\r\n          <>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography variant=\"subtitle1\">\r\n                Found {recommendations.length} recommendations\r\n              </Typography>\r\n              <Button\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                onClick={() => onApplyAllRules(recommendations)}\r\n              >\r\n                Apply All Rules\r\n              </Button>\r\n            </Box>\r\n            \r\n            <Divider sx={{ mb: 2 }} />\r\n            \r\n            <List>\r\n              {recommendations.map((rule, index) => (\r\n                <ListItem\r\n                  key={index}\r\n                  sx={{\r\n                    border: 1,\r\n                    borderColor: 'divider',\r\n                    borderRadius: 1,\r\n                    mb: 1,\r\n                    backgroundColor: 'background.paper'\r\n                  }}\r\n                >\r\n                  <ListItemText\r\n                    primary={\r\n                      <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\r\n                        {getRuleTypeIcon(rule.ruleType)}\r\n                        <Typography variant=\"subtitle2\" fontWeight=\"bold\">\r\n                          {rule.field}\r\n                        </Typography>\r\n                        <Chip\r\n                          label={rule.ruleType}\r\n                          size=\"small\"\r\n                          color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                        <Chip\r\n                          label={`${Math.round(rule.confidence * 100)}% confidence`}\r\n                          size=\"small\"\r\n                          color={getConfidenceColor(rule.confidence) as 'success' | 'warning' | 'error'}\r\n                        />\r\n                      </Box>\r\n                    }\r\n                    secondary={\r\n                      <Box>\r\n                        <Typography component=\"span\" variant=\"body2\" color=\"text.secondary\" display=\"block\" mb={1}>\r\n                          {rule.description}\r\n                        </Typography>\r\n                        <Typography component=\"span\" variant=\"caption\" color=\"text.secondary\" display=\"block\">\r\n                          Condition: {rule.condition}\r\n                        </Typography>\r\n                      </Box>\r\n                    }\r\n                  />\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={() => onApplyRule(rule)}\r\n                    sx={{ ml: 2 }}\r\n                  >\r\n                    Apply\r\n                  </Button>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </>\r\n        )}\r\n\r\n        {!loading && recommendations.length === 0 && !error && (\r\n          <Box textAlign=\"center\" py={4}>\r\n            <Lightbulb sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Click &quot;Generate Recommendations&quot; to get AI-powered rule suggestions\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1188, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/AIErrorCorrection.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Chip,\r\n  CircularProgress,\r\n  Alert,\r\n  Box,\r\n  Typography,\r\n  Divider,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport { AutoFixHigh, CheckCircle, Warning, Error } from '@mui/icons-material';\r\nimport { ErrorCorrection } from '@/utils/aiServices';\r\nimport { useWizardStore } from '@/store/wizardStore';\r\n\r\ninterface AIErrorCorrectionProps {\r\n  data: Record<string, unknown>[];\r\n  onApplyCorrection: (correction: ErrorCorrection) => void;\r\n  onApplyAllCorrections: (corrections: ErrorCorrection[]) => void;\r\n}\r\n\r\nexport default function AIErrorCorrection({\r\n  data,\r\n  onApplyCorrection,\r\n  onApplyAllCorrections\r\n}: AIErrorCorrectionProps) {\r\n  const [corrections, setCorrections] = useState<ErrorCorrection[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedCorrection, setSelectedCorrection] = useState<ErrorCorrection | null>(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  \r\n  const updateTableRow = useWizardStore((state) => state.updateTableRow);\r\n\r\n  const detectErrors = async () => {\r\n    if (data.length === 0) {\r\n      setError('No data available for error detection');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Analyze the actual data for potential errors\r\n      const detectedCorrections: ErrorCorrection[] = [];\r\n      \r\n      data.forEach((row, rowIndex) => {\r\n        Object.entries(row).forEach(([field, value]) => {\r\n          if (typeof value === 'string') {\r\n            // Check for email format issues\r\n            if (field.toLowerCase().includes('email') && value.includes('@') && !value.includes('.')) {\r\n              detectedCorrections.push({\r\n                field,\r\n                originalValue: value,\r\n                suggestedValue: value + '.com',\r\n                confidence: 0.85,\r\n                reason: 'Incomplete email address - missing domain extension',\r\n                correctionType: 'format'\r\n              });\r\n            }\r\n            \r\n            // Check for phone number format issues\r\n            if (field.toLowerCase().includes('phone') && value.length < 10) {\r\n              detectedCorrections.push({\r\n                field,\r\n                originalValue: value,\r\n                suggestedValue: `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6)}`,\r\n                confidence: 0.78,\r\n                reason: 'Phone number format could be standardized',\r\n                correctionType: 'standardization'\r\n              });\r\n            }\r\n            \r\n            // Check for name capitalization\r\n            if (field.toLowerCase().includes('name') && value.length > 0 && value === value.toLowerCase()) {\r\n              detectedCorrections.push({\r\n                field,\r\n                originalValue: value,\r\n                suggestedValue: value.charAt(0).toUpperCase() + value.slice(1),\r\n                confidence: 0.92,\r\n                reason: 'Proper names should be capitalized',\r\n                correctionType: 'format'\r\n              });\r\n            }\r\n            \r\n            // Check for extra whitespace\r\n            if (value !== value.trim()) {\r\n              detectedCorrections.push({\r\n                field,\r\n                originalValue: value,\r\n                suggestedValue: value.trim(),\r\n                confidence: 0.95,\r\n                reason: 'Remove leading/trailing whitespace',\r\n                correctionType: 'format'\r\n              });\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      setCorrections(detectedCorrections);\r\n    } catch (err) {\r\n      setError('Failed to detect errors');\r\n      console.error('AI error detection error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getConfidenceColor = (confidence: number) => {\r\n    if (confidence >= 0.9) return 'success';\r\n    if (confidence >= 0.7) return 'warning';\r\n    return 'error';\r\n  };\r\n\r\n  const getCorrectionTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'format':\r\n        return <AutoFixHigh fontSize=\"small\" />;\r\n      case 'spelling':\r\n        return <CheckCircle fontSize=\"small\" />;\r\n      case 'standardization':\r\n        return <Warning fontSize=\"small\" />;\r\n      case 'validation':\r\n        return <Error fontSize=\"small\" />;\r\n      default:\r\n        return <AutoFixHigh fontSize=\"small\" />;\r\n    }\r\n  };\r\n\r\n  const handleCorrectionClick = (correction: ErrorCorrection) => {\r\n    setSelectedCorrection(correction);\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleApplyCorrection = () => {\r\n    if (selectedCorrection) {\r\n      // Find the row that needs correction\r\n      const rowIndex = data.findIndex(row => \r\n        row[selectedCorrection.field] === selectedCorrection.originalValue\r\n      );\r\n      \r\n      if (rowIndex !== -1) {\r\n        const updatedRow = { ...data[rowIndex] };\r\n        updatedRow[selectedCorrection.field] = selectedCorrection.suggestedValue;\r\n        \r\n        // Update the data in the store\r\n        updateTableRow(0, rowIndex, updatedRow);\r\n        \r\n        // Remove the correction from the list\r\n        setCorrections(prev => prev.filter(c => c !== selectedCorrection));\r\n      }\r\n      \r\n      setDialogOpen(false);\r\n      setSelectedCorrection(null);\r\n    }\r\n  };\r\n\r\n  const handleApplySingleCorrection = (correction: ErrorCorrection) => {\r\n    // Find the row that needs correction\r\n    const rowIndex = data.findIndex(row => \r\n      row[correction.field] === correction.originalValue\r\n    );\r\n    \r\n    if (rowIndex !== -1) {\r\n      const updatedRow = { ...data[rowIndex] };\r\n      updatedRow[correction.field] = correction.suggestedValue;\r\n      \r\n      // Update the data in the store\r\n      updateTableRow(0, rowIndex, updatedRow);\r\n      \r\n      // Remove the correction from the list\r\n      setCorrections(prev => prev.filter(c => c !== correction));\r\n    }\r\n  };\r\n\r\n  const handleApplyAllCorrections = () => {\r\n    corrections.forEach(correction => {\r\n      const rowIndex = data.findIndex(row => \r\n        row[correction.field] === correction.originalValue\r\n      );\r\n      \r\n      if (rowIndex !== -1) {\r\n        const updatedRow = { ...data[rowIndex] };\r\n        updatedRow[correction.field] = correction.suggestedValue;\r\n        updateTableRow(0, rowIndex, updatedRow);\r\n      }\r\n    });\r\n    \r\n    setCorrections([]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card sx={{ width: '100%', mb: 2 }}>\r\n        <CardHeader\r\n          title={\r\n            <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n              <AutoFixHigh color=\"primary\" />\r\n              <Typography variant=\"h6\">AI Error Correction</Typography>\r\n            </Box>\r\n          }\r\n          subheader=\"Let AI detect and suggest fixes for data errors\"\r\n          action={\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={detectErrors}\r\n              disabled={loading || data.length === 0}\r\n              startIcon={loading ? <CircularProgress size={20} /> : <AutoFixHigh />}\r\n            >\r\n              {loading ? 'Detecting...' : 'Detect Errors'}\r\n            </Button>\r\n          }\r\n        />\r\n        \r\n        <CardContent>\r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          {corrections.length > 0 && (\r\n            <>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                <Typography variant=\"subtitle1\">\r\n                  Found {corrections.length} potential errors\r\n                </Typography>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  onClick={handleApplyAllCorrections}\r\n                >\r\n                  Apply All Corrections\r\n                </Button>\r\n              </Box>\r\n              \r\n              <Divider sx={{ mb: 2 }} />\r\n              \r\n              <List>\r\n                {corrections.map((correction, index) => (\r\n                  <ListItem\r\n                    key={index}\r\n                    sx={{\r\n                      border: 1,\r\n                      borderColor: 'divider',\r\n                      borderRadius: 1,\r\n                      mb: 1,\r\n                      backgroundColor: 'background.paper',\r\n                      cursor: 'pointer',\r\n                      '&:hover': {\r\n                        backgroundColor: 'action.hover'\r\n                      }\r\n                    }}\r\n                    onClick={() => handleCorrectionClick(correction)}\r\n                  >\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\r\n                          {getCorrectionTypeIcon(correction.correctionType)}\r\n                          <Typography variant=\"subtitle2\" fontWeight=\"bold\">\r\n                            {correction.field}\r\n                          </Typography>\r\n                          <Chip\r\n                            label={correction.correctionType}\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                          <Chip\r\n                            label={`${Math.round(correction.confidence * 100)}% confidence`}\r\n                            size=\"small\"\r\n                            color={getConfidenceColor(correction.confidence) as 'success' | 'warning' | 'error'}\r\n                          />\r\n                        </Box>\r\n                      }\r\n                      secondary={\r\n                        <Box>\r\n                          <Typography component=\"span\" variant=\"body2\" color=\"text.secondary\" display=\"block\" mb={1}>\r\n                            <strong>From:</strong> {correction.originalValue}\r\n                          </Typography>\r\n                          <Typography component=\"span\" variant=\"body2\" color=\"text.secondary\" display=\"block\" mb={1}>\r\n                            <strong>To:</strong> {correction.suggestedValue}\r\n                          </Typography>\r\n                          <Typography component=\"span\" variant=\"caption\" color=\"text.secondary\" display=\"block\">\r\n                            {correction.reason}\r\n                          </Typography>\r\n                        </Box>\r\n                      }\r\n                    />\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        handleApplySingleCorrection(correction);\r\n                      }}\r\n                      sx={{ ml: 2 }}\r\n                    >\r\n                      Apply\r\n                    </Button>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </>\r\n          )}\r\n\r\n          {!loading && corrections.length === 0 && !error && (\r\n            <Box textAlign=\"center\" py={4}>\r\n              <AutoFixHigh sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Click &quot;Detect Errors&quot; to find and fix data issues\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Correction Details Dialog */}\r\n      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            <AutoFixHigh color=\"primary\" />\r\n            Correction Details\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {selectedCorrection && (\r\n            <Box>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Field: {selectedCorrection.field}\r\n              </Typography>\r\n              \r\n              <TextField\r\n                fullWidth\r\n                label=\"Original Value\"\r\n                value={selectedCorrection.originalValue}\r\n                margin=\"normal\"\r\n                InputProps={{ readOnly: true }}\r\n              />\r\n              \r\n              <TextField\r\n                fullWidth\r\n                label=\"Suggested Value\"\r\n                value={selectedCorrection.suggestedValue}\r\n                margin=\"normal\"\r\n                InputProps={{ readOnly: true }}\r\n              />\r\n              \r\n              <TextField\r\n                fullWidth\r\n                label=\"Reason\"\r\n                value={selectedCorrection.reason}\r\n                margin=\"normal\"\r\n                multiline\r\n                rows={3}\r\n                InputProps={{ readOnly: true }}\r\n              />\r\n              \r\n              <Box display=\"flex\" gap={1} mt={2}>\r\n                <Chip\r\n                  label={selectedCorrection.correctionType}\r\n                  color=\"primary\"\r\n                  variant=\"outlined\"\r\n                />\r\n                <Chip\r\n                  label={`${Math.round(selectedCorrection.confidence * 100)}% confidence`}\r\n                  color={getConfidenceColor(selectedCorrection.confidence) as 'success' | 'warning' | 'error'}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\r\n          <Button onClick={handleApplyCorrection} variant=\"contained\">\r\n            Apply Correction\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1882, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/NaturalLanguageModification.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Button,\r\n  TextField,\r\n  CircularProgress,\r\n  Alert,\r\n  Box,\r\n  Typography,\r\n  Divider,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport { SmartToy, Edit, Preview, CheckCircle } from '@mui/icons-material';\r\nimport { useWizardStore } from '@/store/wizardStore';\r\n\r\ninterface NaturalLanguageModificationProps {\r\n  data: Record<string, unknown>[];\r\n  onApplyModification: (modifiedData: Record<string, unknown>[]) => void;\r\n}\r\n\r\nexport default function NaturalLanguageModification({\r\n  data,\r\n  onApplyModification\r\n}: NaturalLanguageModificationProps) {\r\n  const [instruction, setInstruction] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [previewData, setPreviewData] = useState<Record<string, unknown>[]>([]);\r\n  const [previewDialogOpen, setPreviewDialogOpen] = useState(false);\r\n  \r\n  const applyDataModification = useWizardStore((state) => state.applyDataModification);\r\n\r\n  const processModification = async () => {\r\n    if (!instruction.trim()) {\r\n      setError('Please enter a modification instruction');\r\n      return;\r\n    }\r\n\r\n    if (data.length === 0) {\r\n      setError('No data available for modification');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Create the modification function based on the instruction\r\n      const modificationFunction = (data: Record<string, unknown>[]) => {\r\n        return data.map(row => {\r\n          const modifiedRow = { ...row };\r\n          \r\n          // Apply transformations based on instruction keywords\r\n          if (instruction.toLowerCase().includes('capitalize')) {\r\n            Object.keys(modifiedRow).forEach(key => {\r\n              if (typeof modifiedRow[key] === 'string') {\r\n                modifiedRow[key] = (modifiedRow[key] as string).toUpperCase();\r\n              }\r\n            });\r\n          }\r\n          \r\n          if (instruction.toLowerCase().includes('lowercase')) {\r\n            Object.keys(modifiedRow).forEach(key => {\r\n              if (typeof modifiedRow[key] === 'string') {\r\n                modifiedRow[key] = (modifiedRow[key] as string).toLowerCase();\r\n              }\r\n            });\r\n          }\r\n          \r\n          if (instruction.toLowerCase().includes('trim')) {\r\n            Object.keys(modifiedRow).forEach(key => {\r\n              if (typeof modifiedRow[key] === 'string') {\r\n                modifiedRow[key] = (modifiedRow[key] as string).trim();\r\n              }\r\n            });\r\n          }\r\n          \r\n          if (instruction.toLowerCase().includes('title case')) {\r\n            Object.keys(modifiedRow).forEach(key => {\r\n              if (typeof modifiedRow[key] === 'string') {\r\n                modifiedRow[key] = (modifiedRow[key] as string)\r\n                  .toLowerCase()\r\n                  .split(' ')\r\n                  .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n                  .join(' ');\r\n              }\r\n            });\r\n          }\r\n          \r\n          if (instruction.toLowerCase().includes('remove spaces')) {\r\n            Object.keys(modifiedRow).forEach(key => {\r\n              if (typeof modifiedRow[key] === 'string') {\r\n                modifiedRow[key] = (modifiedRow[key] as string).replace(/\\s+/g, '');\r\n              }\r\n            });\r\n          }\r\n          \r\n          return modifiedRow;\r\n        });\r\n      };\r\n\r\n      // Generate preview\r\n      const previewResult = modificationFunction([...data]);\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      setPreviewData(previewResult);\r\n      setPreviewDialogOpen(true);\r\n    } catch (err) {\r\n      setError('Failed to process modification');\r\n      console.error('AI modification error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleApplyModification = () => {\r\n    // Apply the modification to the actual data in the store\r\n    applyDataModification((data) => {\r\n      return data.map(row => {\r\n        const modifiedRow = { ...row };\r\n        \r\n        // Apply the same transformations\r\n        if (instruction.toLowerCase().includes('capitalize')) {\r\n          Object.keys(modifiedRow).forEach(key => {\r\n            if (typeof modifiedRow[key] === 'string') {\r\n              modifiedRow[key] = (modifiedRow[key] as string).toUpperCase();\r\n            }\r\n          });\r\n        }\r\n        \r\n        if (instruction.toLowerCase().includes('lowercase')) {\r\n          Object.keys(modifiedRow).forEach(key => {\r\n            if (typeof modifiedRow[key] === 'string') {\r\n              modifiedRow[key] = (modifiedRow[key] as string).toLowerCase();\r\n            }\r\n          });\r\n        }\r\n        \r\n        if (instruction.toLowerCase().includes('trim')) {\r\n          Object.keys(modifiedRow).forEach(key => {\r\n            if (typeof modifiedRow[key] === 'string') {\r\n              modifiedRow[key] = (modifiedRow[key] as string).trim();\r\n            }\r\n          });\r\n        }\r\n        \r\n        if (instruction.toLowerCase().includes('title case')) {\r\n          Object.keys(modifiedRow).forEach(key => {\r\n            if (typeof modifiedRow[key] === 'string') {\r\n              modifiedRow[key] = (modifiedRow[key] as string)\r\n                .toLowerCase()\r\n                .split(' ')\r\n                .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n                .join(' ');\r\n            }\r\n          });\r\n        }\r\n        \r\n        if (instruction.toLowerCase().includes('remove spaces')) {\r\n          Object.keys(modifiedRow).forEach(key => {\r\n            if (typeof modifiedRow[key] === 'string') {\r\n              modifiedRow[key] = (modifiedRow[key] as string).replace(/\\s+/g, '');\r\n            }\r\n          });\r\n        }\r\n        \r\n        return modifiedRow;\r\n      });\r\n    });\r\n    \r\n    setPreviewDialogOpen(false);\r\n    setInstruction('');\r\n    setPreviewData([]);\r\n  };\r\n\r\n  const getInstructionExamples = () => [\r\n    'Capitalize all text fields',\r\n    'Convert all text to lowercase',\r\n    'Trim whitespace from all fields',\r\n    'Convert to title case',\r\n    'Remove all spaces from text',\r\n    'Standardize date format to YYYY-MM-DD'\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Card sx={{ width: '100%', mb: 2 }}>\r\n        <CardHeader\r\n          title={\r\n            <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n              <SmartToy color=\"primary\" />\r\n              <Typography variant=\"h6\">Natural Language Modification</Typography>\r\n            </Box>\r\n          }\r\n          subheader=\"Modify your data using plain English instructions\"\r\n        />\r\n        \r\n        <CardContent>\r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={3}\r\n            label=\"Modification Instruction\"\r\n            placeholder=\"e.g., Capitalize all text fields, standardize date formats, etc.\"\r\n            value={instruction}\r\n            onChange={(e) => setInstruction(e.target.value)}\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          <Box display=\"flex\" gap={1} mb={2}>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={processModification}\r\n              disabled={loading || !instruction.trim() || data.length === 0}\r\n              startIcon={loading ? <CircularProgress size={20} /> : <Edit />}\r\n            >\r\n              {loading ? 'Processing...' : 'Process Modification'}\r\n            </Button>\r\n            \r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => setInstruction('')}\r\n              disabled={loading}\r\n            >\r\n              Clear\r\n            </Button>\r\n          </Box>\r\n\r\n          <Divider sx={{ my: 2 }} />\r\n\r\n          <Typography variant=\"subtitle2\" gutterBottom>\r\n            Example Instructions:\r\n          </Typography>\r\n          \r\n          <Box display=\"flex\" flexWrap=\"wrap\" gap={1}>\r\n            {getInstructionExamples().map((example, index) => (\r\n              <Chip\r\n                key={index}\r\n                label={example}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                onClick={() => setInstruction(example)}\r\n                sx={{ cursor: 'pointer' }}\r\n              />\r\n            ))}\r\n          </Box>\r\n\r\n          {!loading && data.length > 0 && (\r\n            <Box mt={2} p={2} bgcolor=\"background.paper\" borderRadius={1}>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                <strong>Data Preview:</strong> {data.length} rows available for modification\r\n              </Typography>\r\n              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                Fields: {Object.keys(data[0] || {}).join(', ')}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Preview Dialog */}\r\n      <Dialog \r\n        open={previewDialogOpen} \r\n        onClose={() => setPreviewDialogOpen(false)} \r\n        maxWidth=\"lg\" \r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            <Preview color=\"primary\" />\r\n            Modification Preview\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n            Preview of your data after applying: &quot;{instruction}&quot;\r\n          </Typography>\r\n          \r\n          <Divider sx={{ my: 2 }} />\r\n          \r\n          <Box maxHeight={400} overflow=\"auto\">\r\n            <List dense>\r\n              {previewData.slice(0, 10).map((row, index) => (\r\n                <ListItem key={index} sx={{ border: 1, borderColor: 'divider', mb: 1, borderRadius: 1 }}>\r\n                  <ListItemText\r\n                    primary={`Row ${index + 1}`}\r\n                    secondary={\r\n                      <Box>\r\n                        {Object.entries(row).map(([key, value]) => (\r\n                          <Typography key={key} variant=\"caption\" display=\"block\">\r\n                            <strong>{key}:</strong> {String(value)}\r\n                          </Typography>\r\n                        ))}\r\n                      </Box>\r\n                    }\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            \r\n            {previewData.length > 10 && (\r\n              <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\" py={2}>\r\n                ... and {previewData.length - 10} more rows\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setPreviewDialogOpen(false)}>Cancel</Button>\r\n          <Button \r\n            onClick={handleApplyModification} \r\n            variant=\"contained\"\r\n            startIcon={<CheckCircle />}\r\n          >\r\n            Apply Modification\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2450, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/RuleBuilderStep.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { Card, CardContent, CardHeader } from '@mui/material';\nimport AIRuleRecommendations from './AIRuleRecommendations';\nimport AIErrorCorrection from './AIErrorCorrection';\nimport NaturalLanguageModification from './NaturalLanguageModification';\nimport { RuleRecommendation, ErrorCorrection } from '@/utils/aiServices';\n\nconst RULE_TYPES = [\n  { type: 'co-run', label: 'Co-run (tasks that must go together)' },\n  { type: 'load-limit', label: 'Load Limit' },\n  { type: 'phase-window', label: 'Phase Window' },\n];\n\nexport interface Rule {\n  type: string;\n  params: Record<string, string | number | boolean>;\n}\n\ninterface RuleBuilderStepProps {\n  onNext: () => void;\n  data: Record<string, unknown>[];\n}\n\nexport const RuleBuilderStep: React.FC<RuleBuilderStepProps> = ({ onNext, data }) => {\n  const [rules, setRules] = useState<Rule[]>([]);\n  const [selectedType, setSelectedType] = useState<string>('co-run');\n  const [param, setParam] = useState('');\n\n  const addRule = () => {\n    if (!param) return;\n    setRules([...rules, { type: selectedType, params: { value: param } }]);\n    setParam('');\n  };\n\n  const handleApplyRule = (rule: RuleRecommendation) => {\n    // Convert AI recommendation to a rule\n    const newRule: Rule = {\n      type: rule.ruleType,\n      params: {\n        field: rule.field,\n        condition: rule.condition,\n        description: rule.description\n      }\n    };\n    setRules([...rules, newRule]);\n  };\n\n  const handleApplyAllRules = (aiRules: RuleRecommendation[]) => {\n    const newRules = aiRules.map(rule => ({\n      type: rule.ruleType,\n      params: {\n        field: rule.field,\n        condition: rule.condition,\n        description: rule.description\n      }\n    }));\n    setRules([...rules, ...newRules]);\n  };\n\n  const handleApplyCorrection = (correction: ErrorCorrection) => {\n    // Apply error correction to data\n    console.log('Applying correction:', correction);\n    // This would typically update the data in the store\n  };\n\n  const handleApplyAllCorrections = (corrections: ErrorCorrection[]) => {\n    // Apply all corrections to data\n    console.log('Applying all corrections:', corrections);\n    // This would typically update the data in the store\n  };\n\n  const handleApplyModification = (modifiedData: Record<string, unknown>[]) => {\n    // Apply natural language modification to data\n    console.log('Applying modification to data:', modifiedData);\n    // This would typically update the data in the store\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gap={3}>\n      <Typography variant=\"h4\" gutterBottom>\n        AI-Powered Rule Builder\n      </Typography>\n      \n      <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n        Use AI to analyze your data and automatically generate validation rules, \n        detect errors, and modify data using natural language.\n      </Typography>\n\n      {/* AI Rule Recommendations */}\n      <Box>\n        <AIRuleRecommendations\n          data={data}\n          onApplyRule={handleApplyRule}\n          onApplyAllRules={handleApplyAllRules}\n        />\n      </Box>\n\n      {/* AI Error Correction */}\n      <Box>\n        <AIErrorCorrection\n          data={data}\n          onApplyCorrection={handleApplyCorrection}\n          onApplyAllCorrections={handleApplyAllCorrections}\n        />\n      </Box>\n\n      {/* Natural Language Modification */}\n      <Box>\n        <NaturalLanguageModification\n          data={data}\n          onApplyModification={handleApplyModification}\n        />\n      </Box>\n\n      {/* Manual Rule Builder */}\n      <Card>\n        <CardHeader\n          title=\"Manual Rule Builder\"\n          subheader=\"Create custom rules manually\"\n        />\n        <CardContent>\n          <Box display=\"flex\" gap={2} alignItems=\"center\" mb={2}>\n            <select \n              value={selectedType} \n              onChange={e => setSelectedType(e.target.value)}\n              style={{ padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n            >\n              {RULE_TYPES.map(rule => (\n                <option key={rule.type} value={rule.type}>{rule.label}</option>\n              ))}\n            </select>\n            <TextField\n              size=\"small\"\n              label=\"Parameter (e.g., T12,T14)\"\n              value={param}\n              onChange={e => setParam(e.target.value)}\n            />\n            <Button variant=\"outlined\" onClick={addRule}>Add Rule</Button>\n          </Box>\n        </CardContent>\n      </Card>\n\n      {/* Current Rules Display */}\n      <Card>\n        <CardHeader\n          title={`Current Rules (${rules.length})`}\n          subheader=\"Rules that will be applied to your data\"\n        />\n        <CardContent>\n          {rules.length > 0 ? (\n            <Box\n              sx={{\n                background: '#f8f9fa',\n                border: '1px solid #e9ecef',\n                padding: 2,\n                borderRadius: 1,\n                maxHeight: 300,\n                overflow: 'auto'\n              }}\n            >\n              <pre style={{ \n                margin: 0, \n                fontSize: '13px',\n                color: '#212529',\n                fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                lineHeight: '1.4'\n              }}>\n                {JSON.stringify(rules, null, 2)}\n              </pre>\n            </Box>\n          ) : (\n            <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\" py={4}>\n              No rules defined yet. Use AI recommendations or manual builder to add rules.\n            </Typography>\n          )}\n        </CardContent>\n      </Card>\n\n      <Box display=\"flex\" justifyContent=\"space-between\" mt={3}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {rules.length} rules configured\n        </Typography>\n        <Button \n          variant=\"contained\" \n          color=\"primary\" \n          onClick={onNext}\n          disabled={rules.length === 0}\n        >\n          Next: Prioritize and Export\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2799, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/components/wizard/PrioritizationStep.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWizardStore } from '../../store/wizardStore';\nimport * as XLSX from 'xlsx';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Slider from '@mui/material/Slider';\n\ninterface CriteriaWeight {\n  label: string;\n  key: string;\n  value: number;\n}\n\nconst CRITERIA: CriteriaWeight[] = [\n  { label: 'Cost', key: 'cost', value: 50 },\n  { label: 'Workload', key: 'workload', value: 50 },\n  { label: 'Preference', key: 'preference', value: 50 },\n  { label: 'Phase Balance', key: 'phaseBalance', value: 50 },\n];\n\n\ninterface PrioritizationStepProps {\n  onExport: () => void;\n}\n\n\nexport const PrioritizationStep: React.FC<PrioritizationStepProps> = ({ onExport }) => {\n  const [criteria, setCriteria] = useState(CRITERIA);\n  const tables = useWizardStore((s) => s.tables);\n\n  const handleChange = (idx: number, value: number) => {\n    setCriteria((prev) => prev.map((c, i) => i === idx ? { ...c, value } : c));\n  };\n\n  // Export clean data and rules.json\n  const handleExport = () => {\n    // Export data to XLSX\n    tables.forEach((table) => {\n      const ws = XLSX.utils.json_to_sheet(table.data);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, table.type);\n      XLSX.writeFile(wb, `${table.type}.xlsx`);\n    });\n    // Export rules and criteria to rules.json\n    const rules = { criteria, /* real rules can be added here */ };\n    const blob = new Blob([JSON.stringify(rules, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'rules.json';\n    a.click();\n    URL.revokeObjectURL(url);\n    if (onExport) onExport();\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gap={3}>\n      <Typography variant=\"h6\">Prioritize criteria and export</Typography>\n      {criteria.map((c, idx) => (\n        <Box key={c.key}>\n          <Typography gutterBottom>{c.label}</Typography>\n          <Slider\n            value={c.value}\n            min={0}\n            max={100}\n            step={1}\n            onChange={(_, v) => handleChange(idx, v as number)}\n            valueLabelDisplay=\"auto\"\n          />\n        </Box>\n      ))}\n      <Button variant=\"contained\" color=\"primary\" onClick={handleExport} sx={{ alignSelf: 'flex-end' }}>\n        Export Clean Data and rules.json\n      </Button>\n    </Box>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAQA,MAAM,WAA6B;IACjC;QAAE,OAAO;QAAQ,KAAK;QAAQ,OAAO;IAAG;IACxC;QAAE,OAAO;QAAY,KAAK;QAAY,OAAO;IAAG;IAChD;QAAE,OAAO;QAAc,KAAK;QAAc,OAAO;IAAG;IACpD;QAAE,OAAO;QAAiB,KAAK;QAAgB,OAAO;IAAG;CAC1D;AAQM,MAAM,qBAAwD,CAAC,EAAE,QAAQ,EAAE;IAChF,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,SAAS,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD,EAAE,CAAC,IAAM,EAAE,MAAM;IAE7C,MAAM,eAAe,CAAC,KAAa;QACjC,YAAY,CAAC,OAAS,KAAK,GAAG,CAAC,CAAC,GAAG,IAAM,MAAM,MAAM;oBAAE,GAAG,CAAC;oBAAE;gBAAM,IAAI;IACzE;IAEA,mCAAmC;IACnC,MAAM,eAAe;QACnB,sBAAsB;QACtB,OAAO,OAAO,CAAC,CAAC;YACd,MAAM,KAAK,6HAAA,CAAA,QAAU,CAAC,aAAa,CAAC,MAAM,IAAI;YAC9C,MAAM,KAAK,6HAAA,CAAA,QAAU,CAAC,QAAQ;YAC9B,6HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,IAAI,IAAI,MAAM,IAAI;YAC/C,CAAA,GAAA,6HAAA,CAAA,YAAc,AAAD,EAAE,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC;QACzC;QACA,0CAA0C;QAC1C,MAAM,QAAQ;YAAE;QAA6C;QAC7D,MAAM,OAAO,IAAI,KAAK;YAAC,KAAK,SAAS,CAAC,OAAO,MAAM;SAAG,EAAE;YAAE,MAAM;QAAmB;QACnF,MAAM,MAAM,IAAI,eAAe,CAAC;QAChC,MAAM,IAAI,SAAS,aAAa,CAAC;QACjC,EAAE,IAAI,GAAG;QACT,EAAE,QAAQ,GAAG;QACb,EAAE,KAAK;QACP,IAAI,eAAe,CAAC;QACpB,IAAI,UAAU;IAChB;IAEA,qBACE,8OAAC,sJAAA,CAAA,UAAG;QAAC,SAAQ;QAAO,eAAc;QAAS,KAAK;;0BAC9C,8OAAC,oKAAA,CAAA,UAAU;gBAAC,SAAQ;0BAAK;;;;;;YACxB,SAAS,GAAG,CAAC,CAAC,GAAG,oBAChB,8OAAC,sJAAA,CAAA,UAAG;;sCACF,8OAAC,oKAAA,CAAA,UAAU;4BAAC,YAAY;sCAAE,EAAE,KAAK;;;;;;sCACjC,8OAAC,4JAAA,CAAA,UAAM;4BACL,OAAO,EAAE,KAAK;4BACd,KAAK;4BACL,KAAK;4BACL,MAAM;4BACN,UAAU,CAAC,GAAG,IAAM,aAAa,KAAK;4BACtC,mBAAkB;;;;;;;mBARZ,EAAE,GAAG;;;;;0BAYjB,8OAAC,4JAAA,CAAA,UAAM;gBAAC,SAAQ;gBAAY,OAAM;gBAAU,SAAS;gBAAc,IAAI;oBAAE,WAAW;gBAAW;0BAAG;;;;;;;;;;;;AAKxG","debugId":null}},
    {"offset": {"line": 2942, "column": 0}, "map": {"version":3,"sources":["file:///S:/x-factor-main/Data-Alchemist-Forge-Your-Own-AI-Resource-Allocation-Configurator/src/app/page.tsx"],"sourcesContent":["\"use client\";\nimport { useState } from \"react\";\nimport { WizardLayout } from \"../components/wizard/WizardLayout\";\nimport { FileUploadStep } from \"../components/wizard/FileUploadStep\";\nimport { useWizardStore } from \"../store/wizardStore\";\nimport { parseFiles } from \"../utils/parseFiles\";\nimport { DataReviewStep } from \"../components/wizard/DataReviewStep\";\nimport { RuleBuilderStep } from \"../components/wizard/RuleBuilderStep\";\nimport { PrioritizationStep } from \"../components/wizard/PrioritizationStep\";\n\nexport default function Home() {\n  const step = useWizardStore((s) => s.step);\n  const setStep = useWizardStore((s) => s.setStep);\n  const setTables = useWizardStore((s) => s.setTables);\n  const tables = useWizardStore((s) => s.tables);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleFiles = async (files: FileList) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const tables = await parseFiles(files);\n      setTables(tables);\n      setStep(1);\n    } catch {\n      setError(\"Error processing files. Please verify the format.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get the first table's data for AI processing\n  const getDataForAI = () => {\n    if (tables && tables.length > 0 && tables[0].data) {\n      return tables[0].data;\n    }\n    return [];\n  };\n\n  return (\n    <WizardLayout activeStep={step}>\n      {step === 0 && (\n        <FileUploadStep onFilesLoaded={handleFiles} />\n      )}\n      {step === 1 && (\n        <DataReviewStep onNext={() => setStep(2)} />\n      )}\n      {step === 2 && (\n        <RuleBuilderStep \n          onNext={() => setStep(3)} \n          data={getDataForAI()}\n        />\n      )}\n      {step === 3 && (\n        <PrioritizationStep onExport={() => console.log('Export completed')} />\n      )}\n      {loading && <div>Loading files...</div>}\n      {error && <div style={{ color: \"red\" }}>{error}</div>}\n    </WizardLayout>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;;AAUe,SAAS;IACtB,MAAM,OAAO,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD,EAAE,CAAC,IAAM,EAAE,IAAI;IACzC,MAAM,UAAU,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD,EAAE,CAAC,IAAM,EAAE,OAAO;IAC/C,MAAM,YAAY,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD,EAAE,CAAC,IAAM,EAAE,SAAS;IACnD,MAAM,SAAS,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD,EAAE,CAAC,IAAM,EAAE,MAAM;IAC7C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,cAAc,OAAO;QACzB,WAAW;QACX,SAAS;QACT,IAAI;YACF,MAAM,SAAS,MAAM,CAAA,GAAA,0HAAA,CAAA,aAAU,AAAD,EAAE;YAChC,UAAU;YACV,QAAQ;QACV,EAAE,OAAM;YACN,SAAS;QACX,SAAU;YACR,WAAW;QACb;IACF;IAEA,+CAA+C;IAC/C,MAAM,eAAe;QACnB,IAAI,UAAU,OAAO,MAAM,GAAG,KAAK,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE;YACjD,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI;QACvB;QACA,OAAO,EAAE;IACX;IAEA,qBACE,8OAAC,4IAAA,CAAA,eAAY;QAAC,YAAY;;YACvB,SAAS,mBACR,8OAAC,8IAAA,CAAA,iBAAc;gBAAC,eAAe;;;;;;YAEhC,SAAS,mBACR,8OAAC,8IAAA,CAAA,iBAAc;gBAAC,QAAQ,IAAM,QAAQ;;;;;;YAEvC,SAAS,mBACR,8OAAC,+IAAA,CAAA,kBAAe;gBACd,QAAQ,IAAM,QAAQ;gBACtB,MAAM;;;;;;YAGT,SAAS,mBACR,8OAAC,kJAAA,CAAA,qBAAkB;gBAAC,UAAU,IAAM,QAAQ,GAAG,CAAC;;;;;;YAEjD,yBAAW,8OAAC;0BAAI;;;;;;YAChB,uBAAS,8OAAC;gBAAI,OAAO;oBAAE,OAAO;gBAAM;0BAAI;;;;;;;;;;;;AAG/C","debugId":null}}]
}